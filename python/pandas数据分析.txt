=========pandas查看数据========
一  查看头尾的行数据
df.head()   df.tail(5)
二 显示索引、列、底层的数据
df.index  ==索引
df.columns ==列
df.values  ==底层的数据

三 统计
df.shape ==查看数据框的行数和列数
df.info() ==查看数据行的索，数据类型，以及内存信息
df.count()  ==统计每一列非空个数
df.A.nunique() ==统计某个列有多少个不同的类
len(set(df.A))
df.A.value_counts() ==统计某列不同的类对应的个数
df.describe()  ==对于数据类型为数值型的列，查询其描述性统计的内容
df.corr()  ==统计相关系数

四 置换
df.T


五 按轴排序
df.sort_index(0)  ==按行名排序
df.sort_index(1)  ==按列名排序

六 按值排序
df.sort_values(by='values',axis=1)  ==按行的值进行排序
df.sort_values(['A','B'],ascending=False)  ==按顺序进行多列降序
df.sort_values(by='B') == 安列进行排序

七 查看最大值的索引
df.idxmax(0)  ==显示所有列最大值所对应的索引
df.A.idxmax(0)  ==显示A列中最大值对应的索引

八 格式化输出 format
格式限定符"{}"
print('{}:.2%'.format(0.12345))    ==12.345%
print('{:,}'.format(123456789))  ==123,456,789
print('{:.2f}'.format(31.31412))  ==31.31

九 选择
1、直接选取数据
df['A']  ==用于获取整行或者整列的数据
2、选择两列
df[['A','B']]
3、通过切片获取行数据
df[0:3]
4、通过标签进行选择  .loc[]
标签的优点是可以多轴交叉选择
df.loc[dates[0]]
(1 位置加标签  df.loc[:,['A','B']]  
(2 标签加标签  df.loc['name','A'] 
5、通过位置进行选择 .iloc[:,:]
df.iloc[3]  ==通过传递数值进行位置选择，选择单行的时候
df.iloc[:,:-3]  ==选取除了最后三列之外的数据
df.iloc[1:3,1:3]  ==通过数值进行切片，位置加位置
df.iloc[[1,3],[1,3]]  ==通过制定一个位置的列表
df.iloc[1,3]   ==获取特定的值
df[df.A>0]  ==布尔索引,使用一个单独列的值来选择数据
df[df>0]  

df[df.A.str.startswith('a')]  ==选取A列值中以A开头的行
df[df.E.isin(['1','2'])]   =使用isin() 来进行过滤

十 赋值
(1 通过标签设置新的值
df.loc['row','column'] = 1
(2 通过位置设置新的值
df.iloc[0,0] = 2
(3 设置整列的值
df.loc[:,'D'] = np.array([3]*len(df))

十一 通过bool索引赋值
df2 = df.copy()
df2[df2>0] = -df2


十二 缺失值处理
(1 删除列的方法
(2  去掉包含缺失值的行，不包含原来的值
(3 对缺失值进行处理
(4 对数据进行bool填充

1 df.isnull().sum()  ==查看每一行有多少缺失值
2 df.shape[0] - df.isnull().sum()   ==统计每一列有多少完整的值

删除列的办法 
df.drop(df.columns[4],axis=1,inplace=True) ==不知道列名的时候
df.drop('E',axis=1,inplace=True)  ==根据列名删除

del df['E']

删除行的办法
df.dropna()  ==不返回df还是原值
df.dropna(how='all')  ==删除所有均为空值的行
df.dropna(inplace=True)  ==返回删除后的

df.dropna(axis=1)  ==删除包含空值的列


缺失值进行填充
df.fillna(value=5,inplace=True)  ==对处理的值进行保存
df.fillna(df.mean())  ==将所有空值替换为平均值
df.fillna(df)  ==读数据进行bool值的填充

十三  相关操作
(1 统计行列平均值
(2 Apply 对数据应用函数
(3 计数value_counts()
(4 字符串大小写转换
(5 数据类型转换
(6 替换 

df.mean()  ==按列统计平均
round(df.mean())  ==对平均取整
df.mean(1)  ==按行统计平均
df.apply(lamda x:x.max()-x.min())  ==对数据应用函数
df.apply(np.mean)  ==按行统计
df.apply(np.max,axis=1)   ==

s.value_counts()  ==计数
df.E.value_counts()  ==查看某一列类别数据各类的个数
df.apply(pd.Series.value_counts())  ==查看某一列的各类统计个数

s=dp.Series()
s.str.lower()  ==字符串大小写转换

df.astype(float)  ==将Dataframe的格式转换为浮点数

df.replace(4,'one')  ==值的替换


十四 合并
(1  concat(不通过键值之间的连接)
(2 merge 类似于SQL类型的连接(join)
(3 Append  类似于SQL中union

concat(默认上下连接，axis=1时左右连接)

merge 类似于SQL类型的连接(join)
根据键连接，merge需要根据某一共同的行或列来进行合并
pd.merge(left,right,on='key')
pd.merge(left,right,on='key',how='left') ==左连接left、右连接right，外链接outer ,默认情况下是inner

Append 将一行连接到一个DataFrame上
专门用于上下按照同列名连接--类似于SQL中union
df.append(s,ignore_index=True)s

十五 分组和分段
(1 分组(对数据进行汇总统计，类似于数据透视表)
(2 通过多个列进行分组形成一个层次索引
(3 分段(对数据进行分段或者分箱切割，可用于连续变量的特征处理)

分组，并对每个分组执行sum/count/mean/median(中位数等函数)
df.groupby('A').sum
df.groupby('A').agg(np.sum)
df.groupby('A').agg({'C':sum,'D':sum})

分组求平均值、最大值、最小值
df.groupby('A').C.agg(['mean','max','min'])
按A类中的个数对C求平均值
df.groupby('A').agg({'C':sum})['C'].mean()

通过多个列进行分组形成一个层次索引
df.groupby(['A','B']).sum()

分段
pd.qcut()与pd.cut
按变量取值范围进行均匀分割cut
cut11 = pd.cut(df1['name'],5)

按变量个数进行均匀分割qcut
cut11 = pd.qcut(df1[''],4)
cut11 = pd.qcut(df1[''],4,labels=False)