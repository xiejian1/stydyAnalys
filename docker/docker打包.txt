========应用打包为docker======
1、使用docker commit 打包我们的应用
1) 创建一个centos镜像
docker pull centos 
2）创建一个基于镜像的容器
docker run -dlt -p 4000:8000 镜像名或id
3) 将jdk tomcat 安装包和web项目上传至镜像中
docker cp /usr/local/jdk安装包 容器名：容器地址
docker cp /usr/local/tomcat安装包 容器名：容器地址
docker cp /usr/local/web项目 容器名：容器地址
4) 进入容器进行操作
docker attach 容器或id
5) 将容器打包成 镜像
docker commit -a "runnoob.com" -m "my apache " 容器名或id 打包的镜像名：标签
OPTION -a 提交的镜像作者
-m 提交时的说明文字
-c  使用dockerfile指令来创建镜像
-p  在commit 时，将容器暂停
6）上传至dockerhub
docker login 
7) 标记镜像
docker tag image username/respository:tag 
8) 发布镜像
docker push username/respotory:tag
===============dockerfile========
使用dockerfile打包应用
FROM  ==指定基础镜像
MAINTAINER  ==指定维护者信息
RUN  ==在命令前面加上RUN即可
ADD  ==COPY文件，会自动解压
WORKDIR  ==设置当前工作目录
VOLUME ==设置卷，挂载主机目录
EXPOSE ==他要打开，暴露容器的端口
CMD ==指定容器启动后要干的事情
ENV ==用于设置环境变量
USER 设置容器的用户
Dockerfile 指令根据作用可以分为两种 构建指令和设置指令
构建指令  ==用于构建image 其指定的的操作不会运行在image的容器上，设置指令用于设置image的属性，其指定的操作将运行在image的容器中

=====构建Dockerfile文件
FROM nginx
MAINTAINER smallqiang
ENV RUN_USER nginx
ENV RUN_GROUP nginx
ENV DATA_DIR  /data/web
ENV LOG_DIR  /data/log/nginx
RUN mkdir /data/log/nginx -p 
RUN chown nginx.nginx -R /data/log/nginx
ADD web /data/web
ADD default.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
ENTRYPOINT nginx -g "daemon off;"
1、拉取了一个nginx镜像
2、设置了几个变量
3、创建了几个需要的目录
4、把当前目录下的web程序复制到的/data/web目录
5、把nginx.conf 配置文件和default.conf复制到镜像中
6、设置一个默认端口
7、设置容器启动时执行的命令

dcoker build -t nginx .

=======dockerfile打包web应用======
FROM openjdk:8
MAINTAINER smallqiang
COPY ./docker-demo-0.0.1-SNAPSHOT.jar mydockerapp.jar
CMD java -jar mydockerapp.jar  

=======dockerfile 打包python webapp应用======
FROM python_webapp
MAINTAINER smallqian
ADD exqmple_app.wsgi /var/www/flaskapp/flask.wsgi
CMD service apache2 start &&tail -f /var/log/apache2/error.log